# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"
spring.datasource.driverClassName = com.mysql.cj.jdbc.Driver
spring.datasource.url = jdbc:mysql://localhost:3306/yelp_rec?useSSL=false&useUnicode=yes&characterEncoding=UTF-8&serverTimezone=UTC

# Username and password
spring.datasource.username = root
spring.datasource.password = bigData2018$

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

spring.jpa.show-sql = true
logging.level.org.hibernate.type=TRACE

#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.properties.hibernate.show_sql=true
#spring.jpa.properties.hibernate.type=trace


# Hibernate ddl auto (parse, parse-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
###spring.jpa.hibernate.ddl-auto = update


# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

#spring.jpa.hibernate.naming_strategy=org.hibernate.cfg.EJB3NamingStrategy
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
spring.jpa.properties.javax.persistence.schema-generation.scripts.action=drop-and-create
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=db-create.sql
spring.jpa.properties.javax.persistence.schema-generation.scripts.drop-target=db-drop.sql
